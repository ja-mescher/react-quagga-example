{"version":3,"sources":["components/AppBar.js","components/Results.js","components/ReactQuagga/utils/index.js","components/ReactQuagga/ReactQuagga.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Typography","variant","maxWidth","marginTop","marginBottom","margin","padding","flex","overflow","list","width","backgroundColor","palette","background","paper","Results","_ref","results","Paper","List","slice","reverse","map","result","index","react","ListItem","ListItemText","primary","codeResult","code","secondary","format","Divider","mediaDeviceSupported","mediaDevices","navigator","getUserMedia","getVideoDevices","Object","asyncToGenerator","regenerator_default","mark","_callee","videoDevices","wrap","_context","prev","next","abrupt","enumerateDevices","sent","forEach","device","kind","push","stop","apply","this","arguments","DEFAULT_CONFIG","inputStream","name","type","constraints","height","facingMode","area","top","right","left","bottom","singleChannel","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","numOfWorkers","hardwareConcurrency","frequency","locate","locator","patchSize","halfSample","ReactQuagga","config","handleDetected","onDetected","handleProcessed","onProcessed","quaggaRef","useRef","useEffect","activeConfig","initAttrs","current","quagga","init","objectSpread","error","console","start","offDetected","offProcessed","ref","content","display","fab","zIndex","dialog","Transition","React","forwardRef","props","Fade","assign","App","_useState","useState","_useState2","slicedToArray","scannerIsActive","setScannerIsActive","_useState3","_useState4","setResults","scannerSupported","setScannerSupported","then","devices","length","useQuagga","Dialog","fullScreen","open","onClose","TransitionComponent","paperFullScreen","Fab","onClick","Close_default","components_ReactQuagga_ReactQuagga","data","concat","toConsumableArray","FilterCenterFocus_default","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d04f9e21.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 0,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            React Quagga Example\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Fragment } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 500,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    margin: 'auto',\n    padding: theme.spacing(1),\n    flex: 1,\n    overflow: 'auto',\n  },\n  list: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  }\n}))\n\nconst Results = ({results}) => {\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.root}>\n      <List className={classes.list}>\n        {results.slice(0).reverse().map((result, index) => (\n          <Fragment>\n            <ListItem>\n              <ListItemText\n                primary={result.codeResult.code}\n                secondary={result.codeResult.format}\n              />\n            </ListItem>\n            <Divider />\n          </Fragment>\n        ))}\n      </List>\n    </Paper>\n  )\n}\n\nexport default Results\n","import { useEffect, useState } from 'react'\n\nconst mediaDeviceSupported = () => {\n  const { mediaDevices } = navigator\n  if(mediaDevices && (typeof mediaDevices.getUserMedia === 'function')) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst getVideoDevices = async () => {\n  if(!mediaDeviceSupported()) return []\n  const videoDevices = []\n  const devices = await navigator.mediaDevices.enumerateDevices()\n  devices.forEach(device => {\n    if(device.kind === 'videoinput') {\n      videoDevices.push(device)\n    }\n  })\n  return videoDevices\n}\n\nexport const useQuagga = () => {\n  const [scannerSupported, setScannerSupported] = useState(false)\n\n  useEffect(() => {\n    getVideoDevices()\n      .then(devices => setScannerSupported(devices.length > 0))\n  }, [])\n\n  return scannerSupported\n}\n\nexport const DEFAULT_CONFIG = {\n  inputStream : {\n    name : \"Live\",\n    type : \"LiveStream\",\n    constraints: {\n    width: 1920,\n    height: 1080,\n    facingMode: \"environment\",\n  },\n  area: { // defines rectangle of the detection/localization area\n    top: \"0%\",    // top offset\n    right: \"0%\",  // right offset\n    left: \"0%\",   // left offset\n    bottom: \"0%\"  // bottom offset\n  },\n  singleChannel: false\n  },\n  decoder : {\n    readers : [\n      \"code_128_reader\"\n    ],\n    debug: {\n        drawBoundingBox: false,\n        showFrequency: false,\n        drawScanline: false,\n        showPattern: false\n    },\n    multiple: false\n  },\n  numOfWorkers: navigator.hardwareConcurrency || 4,\n  frequency: 5,\n  locate: true,\n  locator: {\n    patchSize: \"medium\",\n    halfSample: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types';\nimport quagga from 'quagga'\nimport './ReactQuagga.css'\n\nimport { DEFAULT_CONFIG } from './utils'\n\nconst ReactQuagga = ({\n  config,\n  onDetected: handleDetected,\n  onProcessed: handleProcessed\n}) => {\n  const quaggaRef = useRef(null)\n\n  useEffect(() => {\n    const activeConfig = config || DEFAULT_CONFIG\n    const { inputStream: initAttrs } = activeConfig\n    initAttrs['target'] = quaggaRef.current\n    quagga.init(\n      { ...activeConfig, inputStream: initAttrs },\n      (error) => {\n        if(error) {\n          console.error(error)\n          return\n        }\n        quagga.onDetected(handleDetected)\n        if(handleProcessed) {\n          quagga.onProcessed(handleProcessed)\n        }\n        quagga.start()\n      }\n    )\n    return () => {\n      quagga.offDetected(handleDetected)\n      if(handleProcessed) {\n        quagga.offProcessed(handleProcessed)\n      }\n      quagga.stop()\n    }\n  })\n\n  return (\n    <div\n      ref={quaggaRef}\n      className=\"viewport overlay__content\"\n    />\n  )\n}\n\nReactQuagga.propTypes = {\n  onDetected: PropTypes.func.isRequired,\n  onProcessed: PropTypes.func,\n  config: PropTypes.object,\n};\n\nexport default ReactQuagga;\n","import React, { Fragment, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport AppBar from './components/AppBar'\nimport Results from './components/Results'\nimport Fab from '@material-ui/core/Fab';\nimport CameraIcon from '@material-ui/icons/FilterCenterFocus';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ReactQuagga, { useQuagga } from './components/ReactQuagga'\n\nimport Dialog from '@material-ui/core/Dialog';\nimport Fade from '@material-ui/core/Fade';\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    flex: 1,\n    display: 'flex',\n  },\n  fab: {\n    position: 'absolute',\n    right: 0,\n    bottom: 0,\n    margin: theme.spacing(2),\n    zIndex: 1000,\n  },\n  dialog: {\n    backgroundColor: 'rgba(0,0,0,.25)',\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Fade ref={ref} {...props} />;\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const [scannerIsActive, setScannerIsActive] = useState(false)\n  const [results, setResults] = useState([])\n  const scannerSupported = useQuagga()\n\n  return (\n    <Fragment>\n      <AppBar />\n      <Dialog\n        fullScreen={scannerSupported}\n        open={scannerIsActive}\n        onClose={() => setScannerIsActive(false)}\n        TransitionComponent={Transition}\n        classes={{paperFullScreen: classes.dialog}}\n      >\n        {scannerIsActive ? (\n          <Fragment>\n            <Fab\n              color=\"primary\"\n              aria-label=\"Scan\"\n              className={classes.fab}\n              onClick={() => setScannerIsActive(false)}\n            >\n              <CloseIcon />\n            </Fab>\n            {scannerSupported ? (\n              <ReactQuagga\n                onDetected={(data) => setResults(results => ([...results, data]))}\n              />\n            ) : (\n              <div>{\"Quagga is not supported for this device or browser.\"}</div>\n            )}\n          </Fragment>\n        ) : <div/>}\n      </Dialog>\n      <Fab\n        color=\"primary\"\n        aria-label=\"Scan\"\n        className={classes.fab}\n        onClick={() => setScannerIsActive(true)}\n      >\n        <CameraIcon />\n      </Fab>\n      <div className={classes.content}>\n        <Results results={results}/>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}